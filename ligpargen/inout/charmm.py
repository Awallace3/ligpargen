"""

Module with functions to generate CHARMM/NAMD software inputs (RTF, PRM, PDB, FEP)

Author: Israel Cabeza de Vaca Lopez
Email:  israel.cabezadevaca@icm.uu.se

"""

import os

headerPRM = '''!---------------------------------------------
!        Generated with LigParGen 
!        William L. Jorgensen Lab
!     Author: israel.cabezadevaca@yale.edu
!    OPLS Force Field with CM1A derived Atomic Charges
!---------------------------------------------
'''

headerRTF = '!CHARMM rtf file generated by LigParGen program (israel.cabezadevaca@yale.edu)\n'

kcalToKj = 4.184


def printAtom(atom, alchemical=False):
    
    if atom.dual_just_stateB:

        sigma = atom.sigma_B*0.561231
        epsilon = -1.0*atom.epsilon_B

    else:

        sigma = atom.sigma*0.561231
        epsilon = -1.0*atom.epsilon

    type_charmm = atom.type_charmm


    return '%s 0.00 %3.6f %3.6f 0.00 %3.6f %3.6f\n' % (type_charmm, epsilon, sigma, 0.5*epsilon, sigma)



def printAtomType(atom, alchemicalTransformation):
    
    sigma = 0.1*atom.sigma
    epsilon = 4.184*atom.epsilon

    line = ''

    if alchemicalTransformation:

        sigma_B = 0.1*atom.sigma_B
        epsilon_B = 4.184*atom.epsilon_B

        line = '%10s %5s %10.4f     0.000    A    %10.5E   %10.5E\n' % (atom.type_gmx_B, atom.atomTypeOPLS_B, atom.mass_B, sigma_B, epsilon_B)
    else:

        line = '%10s %5s %10.4f     0.000    A    %10.5E   %10.5E\n' % (atom.type_gmx, atom.atomTypeOPLS, atom.mass, sigma, epsilon)

    return line

def printBond(bond):
    """Generate bond line

    Parameters
    ----------
    bond : Bond Object
        Bond Object

    Returns
    -------
    bondLine : str
        Bond line data
    """

    return '%-6s%-5s%8.3f%8.3f\n' % (bond.atomA.type_charmm, bond.atomB.type_charmm, bond.K0, bond.R0)


def printAngle(angle):
    """Generate angle line

    Parameters
    ----------
    angle : Angle Object
        Angle Object

    Returns
    -------
    angleLine : str
        Angle line data
    """
    
    k0 = angle.K0

    return '%-6s%-6s%-6s%11.2f%12.3f\n' % (angle.atomA.type_charmm, angle.atomB.type_charmm, angle.atomC.type_charmm, k0, angle.angle0)


def printDihedral(dihedral):
    """Generate dihedral line

    Parameters
    ----------
    dihedral : dihedral Object
        dihedral Object

    Returns
    -------
    dihedralLine : str
        dihedral line data
    """

    V1 = dihedral.V1*0.5
    V2 = dihedral.V2*0.5
    V3 = dihedral.V3*0.5
    V4 = dihedral.V4*0.5

    label = '%-11s%-11s%-11s%-8s' % (dihedral.atomA.type_charmm, dihedral.atomB.type_charmm, dihedral.atomC.type_charmm, dihedral.atomD.type_charmm)

    torsion1 = '%s%8.3f 1   0.000\n' % (label, V1)
    torsion2 = '%s%8.3f 2 180.000\n' % (label, V2)
    torsion3 = '%s%8.3f 3   0.000\n' % (label, V3)
    torsion4 = '%s%8.3f 4 180.000\n' % (label, V4)  

    return torsion1+torsion2+torsion3+torsion4


def printImproperDihedral(dihedral):
    """Generate improper dihedral line

    Parameters
    ----------
    dihedral : dihedral Object
        dihedral Object

    Returns
    -------
    dihedralLine : str
        Improper dihedral line data
    """

    V2 = dihedral.V2*0.5

    label = '%-11s%-11s%-11s%-8s' % (dihedral.atomA.type_charmm, dihedral.atomB.type_charmm, dihedral.atomC.type_charmm, dihedral.atomD.type_charmm)

    torsion2 = '%s%13.3f 2 180.000\n' % (label, V2)

    return torsion2


def writePRM(molecule, prmFile):
    """Generate PRM file

    Parameters
    ----------
    molecule : molecule class
        Molecule class
    prmFile : str
        PRM file name
    """

    with open(prmFile,'w') as ofile:

        ofile.write(headerPRM)

        ofile.write('\nBOND\n')
              
        for bond in molecule.bondsVariable: ofile.write(printBond(bond))
        for bond in molecule.bondsAdditional: ofile.write(printBond(bond))

        ofile.write('\nANGLE\n')

        for angle in molecule.anglesVariable: ofile.write(printAngle(angle))
        for angle in molecule.anglesAdditional: ofile.write(printAngle(angle))

        ofile.write('\nDIHEDRAL\n')

        for dihedral in molecule.torsionsVariable: 
            if dihedral.improper==False: ofile.write(printDihedral(dihedral))
        for dihedral in molecule.torsionsAdditional: 
            if dihedral.improper==False: ofile.write(printDihedral(dihedral))

        ofile.write('!  X    X    X    X    0.00000 1 0.000000 1 ! WILD CARD FOR MISSING TORSION PARAMETERS\n')

        ofile.write('\nIMPROPER\n')

        for dihedral in molecule.torsionsVariable: 
            if dihedral.improper==True: ofile.write(printImproperDihedral(dihedral))
        for dihedral in molecule.torsionsAdditional: 
            if dihedral.improper==True: ofile.write(printImproperDihedral(dihedral))

        ofile.write('!  X    X    X    X    0.00000 2 0.000000 1 ! WILD CARD FOR MISSING IMPROPER PARAMETERS\n')

        ofile.write("\nNONBONDED nbxmod 5 atom cdiel switch vatom vdistance vswitch -\n")
        ofile.write("cutnb 14.0 ctofnb 12.0 ctonnb 11.5 eps 1.0 e14fac 0.5  geom\n")

        for atom in molecule.atoms[molecule.numberOfStructuralDummyAtoms:]: 
            ofile.write(printAtom(atom))


def writeRTF(molecule, rtfFile):
    """Generate RTF file

    Parameters
    ----------
    molecule : molecule class
        Molecule class
    rtfFile : str
        RTF file name
    """

    with open(rtfFile,'w') as ofile:

        ofile.write(headerRTF)

        chargeMolecule = 0.0

        for i, atom in enumerate(molecule.atoms[molecule.numberOfStructuralDummyAtoms:], start=1): 
            ofile.write('MASS %d %s %3.4f %s\n' %(i, atom.type_charmm, atom.mass, atom.element))
            chargeMolecule += atom.charge

        ofile.write('AUTO ANGLES DIHE\nRESI %5s %3.3f\n' % (molecule.atoms[0].resname, chargeMolecule))

        atomsToWrite = sorted([atom for atom in molecule.atoms[molecule.numberOfStructuralDummyAtoms:]], key = lambda x: x.serialOriginal)

        for i, atom in enumerate(atomsToWrite, start =1):

            ofile.write('ATOM %s %s %8.4f\n' %(atom.nameOriginal, atom.type_charmm, atom.charge))
            chargeMolecule += atom.charge


        for bond in molecule.bondsVariable: ofile.write('BOND  %-6s%-6s\n' % (bond.atomA.nameOriginal, bond.atomB.nameOriginal))
        for bond in molecule.bondsAdditional: ofile.write('BOND  %-6s%-6s\n' % (bond.atomA.nameOriginal, bond.atomB.nameOriginal))

        for dihedral in molecule.torsionsVariable:
            if dihedral.improper==True:
                ofile.write('IMPR %-5s%-5s%-5s%-5s\n' % (dihedral.atomA.nameOriginal, dihedral.atomB.nameOriginal,
                                dihedral.atomC.nameOriginal,dihedral.atomD.nameOriginal))

        for dihedral in molecule.torsionsAdditional:
            if dihedral.improper==True:
                ofile.write('IMPR %-5s%-5s%-5s%-5s\n' % (dihedral.atomA.nameOriginal, dihedral.atomB.nameOriginal, 
                                dihedral.atomC.nameOriginal, dihedral.atomD.nameOriginal))

        ofile.write('PATCH FIRST NONE LAST NONE\nEND\n')


def writePDB(molecule, pdbFile):
    """Generate PDB file

    Parameters
    ----------
    molecule : molecule class
        Molecule class
    pdbFile : str
        PDB file name
    """
    
    with open(pdbFile, 'w') as ofile:

        atomsToWrite = sorted([atom for atom in molecule.atoms[molecule.numberOfStructuralDummyAtoms:]], key = lambda x: x.serialOriginal)

        for i, atom in enumerate(atomsToWrite, start =1):

            ofile.write('ATOM%7d%5s%4s%6d%12.3f%8.3f%8.3f  1.00  0.00%12s  \n' % (i, atom.nameOriginal, molecule.residueName, 1,atom.x + molecule.shiftX, 
                atom.y + molecule.shiftY, atom.z + molecule.shiftZ, atom.element))


def getFileNames(molname, workdir):
    """Return output file names

    Parameters
    ----------
    molname : str
        Molecule name
    workdir : str
        Working folder path

    Returns
    -------
    prmFile : str
        PRM file name
    rtfFile : str
        RTF file name
    pdbFile : str
        PDB file name
    fepFile : str
        FEP file name
    """

    prmFile = os.path.join(workdir,molname+'.charmm.prm')
    rtfFile = os.path.join(workdir,molname+'.charmm.rtf')
    pdbFile = os.path.join(workdir,molname+'.charmm.pdb')
    fepFile = os.path.join(workdir,molname+'.charmm.fep')

    return prmFile, rtfFile, pdbFile, fepFile

def writeFEP(molecule, fepFile):
    """Generate FEP file

    Parameters
    ----------
    molecule : molecule class
        Molecule class
    fepFile : str
        FEP file name
    """
    
    with open(fepFile, 'w') as ofile:

        atomsToWrite = sorted([atom for atom in molecule.atoms[molecule.numberOfStructuralDummyAtoms:]], key = lambda x: x.serialOriginal)

        for i, atom in enumerate(atomsToWrite, start =1):

            state = -1.0
            if atom.dual_just_stateB: state = 1.0

            ofile.write('ATOM%7d%5s%4s%6d%12.3f%8.3f%8.3f  1.00 %5.2f%12s  \n' % (i, atom.nameOriginal, atom.resname, 1,atom.x + molecule.shiftX, 
            atom.y + molecule.shiftY, atom.z + molecule.shiftZ, state, atom.element))

        ofile.write('END\n')


def write(molecule, molName, workdir):

    prmFile, rtfFile, pdbFile, fepFile = getFileNames(molName, workdir)

    writeRTF(molecule, rtfFile)
    
    writePRM(molecule, prmFile)

    writePDB(molecule, pdbFile)

    if molecule.alchemicalTransformation: 

        writeFEP(molecule, fepFile)
